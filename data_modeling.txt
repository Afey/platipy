comments
    - id (INT primary key)
    - section_id (INT foreign key)
    - user_id (INT foreign key)
    - created_at (datetime)
    - comment (string)
    - rating (INT)

sections
    - id (INT primary key)
    - html_section (string - url + # + sectionid string) - unique string
    - site_id (INT foreign key)
    - num_favorites (INT)
    - (could also add number of comments)

(could treat a response like a comment
    - instead of a section id it would just have a comment id
    - something to distinguish between comment and response
        - if response id is empty, it's a top-level comment)

users
    - id (INT primary key)
    - github_name (string)

favorites
    - id (INT primary key)
    - section_id (INT foreign key)
    - user_id (INT foreign key)

sites (maybe not necessary)
    - id (INT primary key)
    - url (string)
    - (maybe the name of the site)

one to many - two tables
    - foreign key on many side

users to favorites (one to many)
users to comments (one to many)
section to comments (one to many)


comment to responses (one to many)
    - wouldn't need a response table  


(maybe i would later want a user view)
    - which i would need to store favorites in user table


